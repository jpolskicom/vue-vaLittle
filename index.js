"use strict"; function vltl() { this.require = (t => t + "".trim() === ""), this.email = (t => "" !== t.trim() && !t.match(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)), this.phone = (t => "" !== t.trim() && !t.match(/^(?:\(?\?)?(?:[-\.\(\)\s]*(\d)){9}\)?$/)), this.postCode = (t => "" !== t.trim() && !t.match(/^([0-9]{2}\-[0-9]{3})$/)), this.requireGroupState = {}, this.requireGroup = ((t, e) => (t.trim() && !1 !== t && !this.requireGroupState.hasOwnProperty(e) && (this.requireGroupState[e] = !1), !1)), this.equalGroupState = {}, this.equalGroup = ((t, e) => (t.trim() && !1 !== t && !this.equalGroupState.hasOwnProperty(e) ? this.equalGroupState[e] = t : t.trim() && !1 !== t && t !== this.equalGroupState[e] && delete this.equalGroupState[e], !1)), this.min = ((t, e) => !("" === t.trim() || t.length >= e)), this.max = ((t, e) => !("" === t.trim() || t.length <= e)), this.minVal = ((t, e) => !("" === String(t).trim() || t >= e)), this.maxVal = ((t, e) => !("" === String(t).trim() || t <= e)), this.number = (t => "" !== String(t).trim() && !t.match(/^([0-9 -]+)$/)), this.text = (t => "" !== t.trim() && !t.match(/^([a-zA-Z _-]+)$/)), this.regex = ((t, e) => "" !== t.trim() && !t.match(new RegExp(e))), this.callback = ((t, e) => e(this)), this.rules = {}, this.messages = {}, this.results = {}, this.prepareResults = (() => { for (let t in this.results) { if (!Object.keys(this.results[t]).indexOf("requireGroup")) { let e = this.requireGroupState[this.rules[t].requireGroup]; this.results[t].requireGroup = !0 === e || void 0 === e } if (Object.keys(this.results[t]).indexOf("equalGroup") > -1 && !this.equalGroupState[this.rules[t].equalGroup]) { let e = this.equalGroupState[this.rules[t].equalGroup]; this.results[t].equalGroup = void 0 === e } let e = Object.values(this.results[t]).indexOf(!0); this.results[t].errors = -1 != e, this.results[t].message = -1 == e ? "" : this.messages[t][Object.keys(this.rules[t])[e]] } let t = Object.keys(this.results).map(t => this.results[t].errors).indexOf(!0); this.results.errors = -1 !== t }), this.check = (t => { this.results = {}; var e = this; for (let s in e.rules) { this.results[s] = {}; Object.keys(e.rules[s]).forEach(r => { let i = e.rules[s][r]; if (!0 === i) var u = void 0 !== t[s] && this[r](t[s]); else if (!1 !== i) u = void 0 !== t[s] && this[r](t[s], i); this.results[s][r] = u }) } return this.prepareResults(), this.requireGroupState = {}, this.equalGroupState = {}, this.results }), this.getError = (t => this.results[t] ? this.results[t] : { message: "" }), this.isValid = !!this.errors && !this.errors.errors } Object.defineProperty(exports, "__esModule", { value: !0 }), exports.default = void 0; const vaLittle = { install(t, e) { t.prototype.$vaLittle = (() => !1), t.mixin({ created() { this.$vaLittle = new vltl; const t = this.$vaLittle; let e = this.$options.validate; e && (t.rules = e.rules, t.messages = e.messages) } }) } }; var _default = vaLittle; exports.default = _default;